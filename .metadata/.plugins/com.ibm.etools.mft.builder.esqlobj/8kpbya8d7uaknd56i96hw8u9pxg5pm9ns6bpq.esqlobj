/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN		
		--Referencia los Arrays del objeto entorno
		DECLARE refEnv REFERENCE TO Environment;		
		-- Copiar Cabeceras		
		SET OutputRoot.MQMD        = refEnv.Variables.headers.MQMD;
		SET OutputRoot.MQRFH2      = refEnv.Variables.headers.MQRFH2; 		
		--Declarar referencias
	    DECLARE refMQRFH2 REFERENCE TO OutputRoot.MQRFH2;
		DECLARE refInpRoot REFERENCE TO OutputRoot;	
		DECLARE outputRFHRef REFERENCE TO OutputRoot.MQRFH2;		


                     
        --Enviar información para auditoría y headers
		CALL common.procedures.utils.createMsgLogs(refMQRFH2, SERVICE_RS_TRACE, NM_COMPONENT_QUERY_PRs);
		CALL common.procedures.utils.saveMQM(refInpRoot, refEnv);			
		--Propaga mensaje de auditoría
		PROPAGATE TO TERMINAL 'out1' DELETE NONE;
			
        DECLARE faultString CHARACTER InputRoot.SOAP.Body.soap:Fault.faultstring;	
         IF (faultString IS NOT NULL) THEN			
			    DECLARE serverStatusCode CHARACTER COALESCE(InputRoot.SOAP.*:Body.*:Fault.*:faultcode);
		        DECLARE serverStatusDesc CHARACTER COALESCE(InputRoot.SOAP.*:Body.*:Fault.*:faultstring);					
			    --Referencio el Mensaje de Respuesta del Back-end
		        DECLARE inputRef REFERENCE TO InputLocalEnvironment.Variables.XMLNSC.ns:RegistroUsuarioReq;	
			    CREATE FIELD OutputRoot.XMLNSC.ns:RegistroUsuarioResp;
			    DECLARE outputRef REFERENCE TO OutputRoot.XMLNSC.ns:RegistroUsuarioResp; 				
				--Referencio los campos de respuesta para el Update del Log de Auditoria
				SET outputRef.ContextTransaction.CodeTransaction     = serverStatusCode;
			    SET outputRef.ContextTransaction.DescTransaction 	 = COALESCE(serverStatusDesc, 'Error Interno IIB');															
				---Mapeo La respuesta hacia el canal				
				SET outputRef.UsuarioOut.RqUID                       =   COALESCE(inputRef.UsuarioIn.RqUID, '');	
				SET outputRef.UsuarioOut.StatusCode                  =   300; 
				SET outputRef.UsuarioOut.Severity                    =   'Error'; 			
				SET outputRef.UsuarioOut.StatusDesc                  =   serverStatusDesc;									
				--Consumo cola de la Fachada
				RETURN TRUE;			
         END IF;	
                 
         --Si el Usuario es Funcionario de la Fuerza Publica, se consume el especifico RegistraduriaRegistryUser           
		 IF(InputRoot.XMLNSC.ns1:ConsultaFuncionarioResp.FuncionarioOut.StatusCode=0)THEN				   		    			    			
				--Referencio el Mensaje de Respuesta del Back-end
				DECLARE inputRef REFERENCE TO InputLocalEnvironment.Variables.XMLNSC.ns:RegistroUsuarioReq.UsuarioIn;
				--Referencio mensaje de Salida hacia el especifico que invoca el registro.
	            CREATE FIELD OutputRoot.XMLNSC.ns:RegistroUsuarioReq.UsuarioIn;
				DECLARE outputRef REFERENCE TO OutputRoot.XMLNSC.ns:RegistroUsuarioReq.UsuarioIn; 					
				--Crear el mensaje para enviar al partner				
				SET outputRef = inputRef; 											
				--Enviar al especifico
				PROPAGATE TO TERMINAL 'out2' DELETE NONE;
				--Consumo cola de especifico
				RETURN FALSE;
				
		  --Si el usuario no es Funcionario de la Fuerza Publica, se construye la respuesta hacia la fachada.                 
		   ELSE						  		   				    							
				--Referencio los campos de respuesta del Back-end
				DECLARE inputRef REFERENCE TO InputRoot.XMLNSC.ns1:ConsultaFuncionarioResp.FuncionarioOut;				
				--Referencio mensaje de Salida hacia la fachada.
				CREATE FIELD OutputRoot.XMLNSC.ns:RegistroUsuarioResp;
				DECLARE outputRef REFERENCE TO OutputRoot.XMLNSC.ns:RegistroUsuarioResp; 												
				--Mapeo mensaje de respuesta para el Update de la Auditoria
				SET outputRef.ContextTransaction.CodeTransaction 	= 'Info';
			    SET outputRef.ContextTransaction.DescTransaction    = COALESCE(inputRef.StatusDesc, ' Transacción Exitosa');								
				---Mapeo mensaje de respuesta hacia la fachada
				CREATE FIELD outputRef.UsuarioOut;
				DECLARE refOut REFERENCE TO outputRef.UsuarioOut; 							
				SET refOut  =  inputRef;																
				--Consumo cola de la Fachada de Respuesta
				RETURN TRUE;
	    END IF;	   		   		
END;

CREATE PROCEDURE CopyMessageHeaders() BEGIN
	DECLARE I INTEGER 1;
	DECLARE J INTEGER;
	SET J = CARDINALITY(InputRoot.*[]);
	WHILE I < J DO
		SET OutputRoot.*[I] = InputRoot.*[I];
		SET I = I + 1;
	END WHILE;
END;

CREATE PROCEDURE CopyEntireMessage() BEGIN
	SET OutputRoot = InputRoot;
END;
